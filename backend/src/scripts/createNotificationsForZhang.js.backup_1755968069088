const { Pool } = require('pg');
require('dotenv').config({ path: require('path').join(__dirname, '../../.env') });

const pool = new Pool({
  host: process.env.DB_HOST || 'gz-postgres-peldbckv.sql.tencentcdb.com',
  port: process.env.DB_PORT || 23309,
  database: process.env.DB_NAME || 'blue_collar_platform',
  user: process.env.DB_USER || 'staffLink',
  password: process.env.DB_PASSWORD || 'SkzgEBg-23YbBpc',
  ssl: {
    rejectUnauthorized: false
  }
});

async function createTestNotifications() {
  try {
    console.log('🔔 为张师傅创建测试通知...\n');
    
    // 获取张师傅的ID (13800138001)
    const worker = await pool.query(
      "SELECT id, name FROM workers WHERE phone = '13800138001'"
    );
    
    if (worker.rows.length === 0) {
      console.log('❌ 未找到张师傅账号');
      return;
    }
    
    const workerId = worker.rows[0].id;
    const workerName = worker.rows[0].name;
    console.log(`找到工人: ${workerName} (ID: ${workerId})`);
    
    // 获取一个企业账号
    const company = await pool.query('SELECT id, company_name FROM companies LIMIT 1');
    const companyId = company.rows[0].id;
    const companyName = company.rows[0].company_name;
    
    // 创建各种类型的通知
    const notifications = [
      {
        receiver_id: workerId,
        receiver_type: 'worker',
        sender_id: companyId,
        sender_type: 'company',
        type: 'invitation_received',
        title: '新工作机会',
        message: `${companyName}邀请您参与"办公楼装修"项目，日薪350元`,
        is_read: false,
        metadata: {
          companyName: companyName,
          projectName: '办公楼装修',
          wageOffer: 350,
          wageType: 'daily',
          location: '朝阳区建国路88号'
        }
      },
      {
        receiver_id: workerId,
        receiver_type: 'worker',
        sender_id: companyId,
        sender_type: 'company',
        type: 'invitation_received',
        title: '新工作机会',
        message: `${companyName}邀请您参与"水电维修"项目，时薪60元`,
        is_read: false,
        metadata: {
          companyName: companyName,
          projectName: '水电维修',
          wageOffer: 60,
          wageType: 'hourly',
          location: '海淀区中关村大街1号'
        }
      },
      {
        receiver_id: workerId,
        receiver_type: 'worker',
        sender_id: companyId,
        sender_type: 'company',
        type: 'project_started',
        title: '项目即将开始',
        message: '"商场改造"项目将在今天下午2:00开始，请提前到达现场',
        is_read: false,
        metadata: {
          projectName: '商场改造',
          startTime: '14:00',
          location: '东城区王府井大街100号',
          contact: '李经理 13900000001'
        }
      },
      {
        receiver_id: workerId,
        receiver_type: 'worker',
        type: 'payment_received',
        title: '工资到账通知',
        message: '您的"地板安装"项目工资¥2800已到账，请查收',
        is_read: false,
        metadata: {
          projectName: '地板安装',
          amount: 2800,
          paymentMethod: '银行转账',
          bankAccount: '尾号8888'
        }
      },
      {
        receiver_id: workerId,
        receiver_type: 'worker',
        sender_id: companyId,
        sender_type: 'company',
        type: 'project_completed',
        title: '项目已完成',
        message: '"厨房改造"项目已完成，感谢您的辛勤工作！',
        is_read: true,
        metadata: {
          projectName: '厨房改造',
          completedAt: new Date().toISOString(),
          rating: 5,
          comment: '工作认真负责，技术精湛'
        }
      },
      {
        receiver_id: workerId,
        receiver_type: 'worker',
        type: 'system',
        title: '系统维护通知',
        message: '系统将于今晚23:00-01:00进行维护升级，期间可能无法使用',
        is_read: true,
        metadata: {
          maintenanceType: 'scheduled',
          duration: '2小时'
        }
      },
      {
        receiver_id: workerId,
        receiver_type: 'worker',
        sender_id: companyId,
        sender_type: 'company',
        type: 'invitation_cancelled',
        title: '邀请已取消',
        message: `${companyName}取消了"外墙粉刷"项目的邀请，给您带来不便敬请谅解`,
        is_read: true,
        metadata: {
          companyName: companyName,
          projectName: '外墙粉刷',
          reason: '项目暂时延期'
        }
      }
    ];
    
    // 插入通知
    let successCount = 0;
    for (const notification of notifications) {
      try {
        const insertQuery = `
          INSERT INTO notifications (
            receiver_id, receiver_type, sender_id, sender_type,
            type, title, message, is_read, metadata, created_at
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, 
            CURRENT_TIMESTAMP - INTERVAL '${Math.floor(Math.random() * 48)} hours'
          )
          RETURNING id, title, type, is_read;
        `;
        
        const values = [
          notification.receiver_id,
          notification.receiver_type,
          notification.sender_id || null,
          notification.sender_type || null,
          notification.type,
          notification.title,
          notification.message,
          notification.is_read,
          JSON.stringify(notification.metadata)
        ];
        
        const result = await pool.query(insertQuery, values);
        console.log(`✅ 创建通知: ${result.rows[0].title} (${result.rows[0].type}) - ${result.rows[0].is_read ? '已读' : '未读'}`);
        successCount++;
      } catch (error) {
        console.error(`❌ 创建通知失败:`, error.message);
      }
    }
    
    // 统计结果
    const stats = await pool.query(
      `SELECT 
        COUNT(*) as total,
        COUNT(*) FILTER (WHERE is_read = false) as unread
      FROM notifications 
      WHERE receiver_id = $1 AND receiver_type = 'worker'`,
      [workerId]
    );
    
    console.log('\n📊 统计结果:');
    console.log(`${workerName} (13800138001):`);
    console.log(`  - 总通知数: ${stats.rows[0].total}`);
    console.log(`  - 未读通知: ${stats.rows[0].unread}`);
    
    console.log('\n🎉 测试通知创建完成！');
    console.log('📱 现在可以用 13800138001 / 123456 登录查看通知了');
    
  } catch (error) {
    console.error('❌ 错误:', error.message);
  } finally {
    await pool.end();
  }
}

// 执行
createTestNotifications();