const { Pool } = require('pg');
require('dotenv').config({ path: require('path').join(__dirname, '../../.env') });

const pool = new Pool({
  host: process.env.DB_HOST || 'gz-postgres-peldbckv.sql.tencentcdb.com',
  port: process.env.DB_PORT || 23309,
  database: process.env.DB_NAME || 'blue_collar_platform',
  user: process.env.DB_USER || 'staffLink',
  password: process.env.DB_PASSWORD || 'SkzgEBg-23YbBpc',
  ssl: {
    rejectUnauthorized: false
  }
});

async function createTestNotifications() {
  try {
    console.log('🔔 创建测试通知...\n');
    
    // 获取测试用户
    const workers = await pool.query('SELECT id, name FROM workers LIMIT 3');
    const companies = await pool.query('SELECT id, company_name FROM companies LIMIT 1');
    
    if (workers.rows.length === 0 || companies.rows.length === 0) {
      console.log('❌ 没有找到测试用户，请先创建工人和企业账号');
      return;
    }
    
    const workerId1 = workers.rows[0].id;
    const workerName1 = workers.rows[0].name;
    const companyId = companies.rows[0].id;
    const companyName = companies.rows[0].company_name;
    
    // 定义测试通知
    const testNotifications = [
      // 给工人的通知
      {
        receiver_id: workerId1,
        receiver_type: 'worker',
        sender_id: companyId,
        sender_type: 'company',
        type: 'invitation_received',
        title: '新工作机会',
        message: `${companyName}邀请您参与"办公室装修"项目，日薪300元`,
        is_read: false,
        metadata: {
          companyName: companyName,
          projectName: '办公室装修',
          wageOffer: 300,
          wageType: 'daily'
        }
      },
      {
        receiver_id: workerId1,
        receiver_type: 'worker',
        sender_id: companyId,
        sender_type: 'company',
        type: 'invitation_received',
        title: '新工作机会',
        message: `${companyName}邀请您参与"厨房改造"项目，时薪50元`,
        is_read: false,
        metadata: {
          companyName: companyName,
          projectName: '厨房改造',
          wageOffer: 50,
          wageType: 'hourly'
        }
      },
      {
        receiver_id: workerId1,
        receiver_type: 'worker',
        sender_id: companyId,
        sender_type: 'company',
        type: 'project_started',
        title: '项目即将开始',
        message: '"水电维修"项目将在明天上午9:00开始，请准时到达',
        is_read: false,
        metadata: {
          projectName: '水电维修',
          startTime: '09:00',
          location: '朝阳区建国路88号'
        }
      },
      {
        receiver_id: workerId1,
        receiver_type: 'worker',
        type: 'payment_received',
        title: '工资到账',
        message: '您的"地板安装"项目工资¥1500已到账，请查收',
        is_read: true,
        metadata: {
          projectName: '地板安装',
          amount: 1500,
          paymentMethod: '银行转账'
        }
      },
      {
        receiver_id: workerId1,
        receiver_type: 'worker',
        type: 'system',
        title: '系统通知',
        message: '新功能上线：现在可以在个人中心上传资质证书了',
        is_read: true,
        metadata: {
          feature: 'certificate_upload'
        }
      },
      
      // 给企业的通知
      {
        receiver_id: companyId,
        receiver_type: 'company',
        sender_id: workerId1,
        sender_type: 'worker',
        type: 'invitation_accepted',
        title: '工人已确认',
        message: `${workerName1}已确认参与"办公室装修"项目`,
        is_read: false,
        metadata: {
          workerName: workerName1,
          projectName: '办公室装修'
        }
      },
      {
        receiver_id: companyId,
        receiver_type: 'company',
        sender_id: workers.rows[1]?.id || workerId1,
        sender_type: 'worker',
        type: 'invitation_rejected',
        title: '工人已拒绝',
        message: `${workers.rows[1]?.name || '李师傅'}拒绝了"厨房改造"项目的邀请`,
        is_read: false,
        metadata: {
          workerName: workers.rows[1]?.name || '李师傅',
          projectName: '厨房改造',
          reason: '时间冲突'
        }
      }
    ];
    
    // 插入通知
    for (const notification of testNotifications) {
      const insertQuery = `
        INSERT INTO notifications (
          receiver_id, receiver_type, sender_id, sender_type,
          type, title, message, is_read, metadata
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        RETURNING id, title, receiver_type;
      `;
      
      const values = [
        notification.receiver_id,
        notification.receiver_type,
        notification.sender_id || null,
        notification.sender_type || null,
        notification.type,
        notification.title,
        notification.message,
        notification.is_read,
        JSON.stringify(notification.metadata)
      ];
      
      const result = await pool.query(insertQuery, values);
      console.log(`✅ 创建通知: ${result.rows[0].title} (${result.rows[0].receiver_type})`);
    }
    
    // 统计通知数量
    const workerCount = await pool.query(
      'SELECT COUNT(*) as count FROM notifications WHERE receiver_id = $1 AND receiver_type = $2',
      [workerId1, 'worker']
    );
    
    const workerUnreadCount = await pool.query(
      'SELECT COUNT(*) as count FROM notifications WHERE receiver_id = $1 AND receiver_type = $2 AND is_read = false',
      [workerId1, 'worker']
    );
    
    const companyCount = await pool.query(
      'SELECT COUNT(*) as count FROM notifications WHERE receiver_id = $1 AND receiver_type = $2',
      [companyId, 'company']
    );
    
    const companyUnreadCount = await pool.query(
      'SELECT COUNT(*) as count FROM notifications WHERE receiver_id = $1 AND receiver_type = $2 AND is_read = false',
      [companyId, 'company']
    );
    
    console.log('\n📊 通知统计:');
    console.log(`工人 ${workerName1}:`);
    console.log(`  - 总通知数: ${workerCount.rows[0].count}`);
    console.log(`  - 未读通知: ${workerUnreadCount.rows[0].count}`);
    console.log(`\n企业 ${companyName}:`);
    console.log(`  - 总通知数: ${companyCount.rows[0].count}`);
    console.log(`  - 未读通知: ${companyUnreadCount.rows[0].count}`);
    
    console.log('\n🎉 测试通知创建完成！');
    console.log('\n💡 提示:');
    console.log('1. 使用工人账号登录 App 查看通知');
    console.log('2. 测试账号: 13800138001 / 123456');
    console.log('3. 在个人中心点击"消息通知"查看');
    
  } catch (error) {
    console.error('❌ 创建测试通知失败:', error.message);
  } finally {
    await pool.end();
  }
}

// 运行脚本
createTestNotifications();